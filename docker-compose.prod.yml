# docker-compose.prod.yml - Configuration Docker pour la production & Dokploy

services:
  # ===== BASE DE DONNÉES =====
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-bloguser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-blogdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bloguser} -d ${POSTGRES_DB:-blogdb}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    # Port non exposé - communication interne uniquement (sécurité)

  # ===== APPLICATION WEB =====
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bloguser}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-blogdb}
      - BACKEND_PORT=3001
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - SEED_DB=${SEED_DB:-false}
      - DB_HOST=postgres
      - DB_PORT=5432
    ports:
      - "3000:3000"  # Port standard pour Dokploy
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== REVERSE PROXY (OPTIONNEL) =====
  nginx:
    image: nginx:alpine
    container_name: blog-nginx
    ports:
      - "443:443"  # HTTPS
      - "80:80"    # HTTP (redirection vers HTTPS)
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - blog-network
    depends_on:
      - web
    restart: always
    profiles:
      - nginx  # Démarre seulement avec --profile nginx

# ===== RÉSEAUX =====
networks:
  app-network:
    driver: bridge

# ===== VOLUMES =====
volumes:
  postgres_data:
    driver: local